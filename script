repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer.Character;
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local win = Rayfield:CreateWindow({
   Name = 'SPTS: Endless v1.0.4 (On-line)',
   LoadingTitle = 'SPTS: Endless',
   LoadingSubtitle = 'by Ayrez â”ƒ Ayrez#0909',
   ConfigurationSaving = {
      Enabled = true,
      FileName = 'SPTSEndless'
   }
})
-- 
local s = setmetatable({}, {
    __index = function(self, serv)
        return game:GetService(serv)
    end
}) 
-- 
local GC = getconnections or get_signal_cons -- synx / krnl support

if GC then
	for i,v in pairs(GC(s.Players.LocalPlayer.Idled)) do
	    if v['Disable'] then
			v['Disable'](v)
		elseif v['Disconnect'] then
			v['Disconnect'](v)
		end
	end
end
--
main = {}; do 
    main.toPos = function(v)
        s.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v
    end
    
    main.equipTool = function(v)
        s.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
    end 
    
    main.unequipTool = function(v)
        s.Players.LocalPlayer.Character.Humanoid:UnequipTools()
    end
    
    main.clickButton = function(v)
        for i, b in pairs(getconnections(v.Activated)) do
            b.Function()
        end

        for i, b in pairs(getconnections(v.MouseButton1Click)) do
            b.Function()
        end
    end
end
-------
--\\\--
local page1 = win:CreateTab('Auto Farm')
--///--
-------
--\\\--
local page4 = win:CreateTab('Teleports')
--///--
--
Rayfield:Notify({
    Title = 'UI Library has loaded!',
    Content = 'by Ayrez#0909',
    Duration = 5
})
--
page1:CreateSection('Auto Farm All Stats (excl. Psychic)')
local Toggle = page1:CreateToggle({
    Name = 'Auto Farm All Stats',
    CurrentValue = false,
    Flag = 'AutoFarmAllStats', 
    Callback = function(t)
      getgenv().StatFarm = t;
        -- game aint fixing wht it should fix
        local requestRemotes = {
            'Add_FS_Request';
            'Add_MS_Request';
            'Add_JF_Request';
            '+BT1';
        }
        while task.wait(0.33) do 
            if not getgenv().StatFarm then main.unequipTool() break; end;
	    repeat task.wait() until s.Players.LocalPlayer.Character:FindFirstChild('Humanoid')
            main.equipTool(s.Players.LocalPlayer.Backpack:FindFirstChild('Meditate'))
            for i,v in pairs(requestRemotes) do 
                if table.find(requestRemotes, v) then 
                    task.wait(0.05)
                    s.ReplicatedStorage.RemoteEvent:FireServer({[1] = v})
                end
            end
        end
    end,
})
page1:CreateSection('Auto Farm Individual Stats')
local Toggle = page1:CreateToggle({
    Name = 'Fist Strength',
    CurrentValue = false,
    Flag = 'AutoFistStrength', 
    Callback = function(t)
        getgenv().Fist = t;
        while task.wait(0.33) do 
            if not getgenv().Fist then break; end;
            s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'Add_FS_Request'})
        end
    end,
})
local Toggle = page1:CreateToggle({
    Name = 'Body Strength',
    CurrentValue = false,
    Flag = 'AutoBodyStrength', 
    Callback = function(t)
        getgenv().Body = t;
        while task.wait(0.33) do 
            if not getgenv().Body then break; end;
            s.ReplicatedStorage.RemoteEvent:FireServer({[1] = '+BT1'})
        end
    end,
})
local Toggle = page1:CreateToggle({
    Name = 'Psychic Power',
    CurrentValue = false,
    Flag = 'AutoPsychic', 
    Callback = function(t)
        getgenv().Psychic = t;
        while task.wait(0.33) do 
            if not getgenv().Psychic then main.unequipTool() break; end;
            repeat task.wait() until s.Players.LocalPlayer.Character:FindFirstChild('Humanoid')
            main.equipTool(s.Players.LocalPlayer.Backpack:FindFirstChild('Meditate'))
        end
    end,
})
local Toggle = page1:CreateToggle({
    Name = 'Move Speed',
    CurrentValue = false,
    Flag = 'AutoMoveSpeed', 
    Callback = function(t)
        getgenv().Speed = t;
        while task.wait(0.33) do 
            if not getgenv().Speed then break; end;
            s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'Add_MS_Request'})
        end
    end,
})
local Toggle = page1:CreateToggle({
    Name = 'Jump Force',
    CurrentValue = false,
    Flag = 'AutoJumpForce', 
    Callback = function(t)
        getgenv().Jump = t;
        while task.wait(0.33) do 
            if not getgenv().Jump then break; end;
            s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'Add_JF_Request'})
        end
    end,
})
page1:CreateSection('Auto Equip')
local Dropdown = page1:CreateDropdown({
    Name = 'Select Weight',
    Options = {'None', '100 LB', '1 TON', '10 TON', '100 TON', '1K TON', '10K TON', '100K TON', '1M TON', '10M TON', '1B TON', '100B TON', '10T TON', '1Qa TON', '100Qa TON', '10Qi TON', '1Sx TON', '100Sx TON', '10Sp TON', '100c TON', '10No TON', '10Dc TON', '10Td TON', '10Qad TON', '10Qid TON'},
    CurrentOption = 'None',
    Flag = 'WeightSelect', -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(t)
        getgenv().TargetWeight = t;
    end,
})
local Toggle = page1:CreateToggle({
    Name = 'Auto Equip Weights',
    CurrentValue = false,
    Flag = 'WeightToggle', 
    Callback = function(b)
        getgenv().AutoEquipWeights = b; 
    
        while task.wait(0.1) do 
            if not getgenv().AutoEquipWeights then return; end
            local t = getgenv().TargetWeight 
            if t == 'None' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 0})
            end 
            
            if t == '100 LB' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 1})
            end 
            
            if t == '1 TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 2})
            end 
            
            if t == '10 TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 3})
            end 
            
            if t == '100 TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 4})
            end 
            
            if t == '1k TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 5})
            end 
            
            if t == '10k TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 6})
            end 
            
            if t == '100k TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 7})
            end 
            
            if t == '1M TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 8})
            end 
            
            if t == '10M TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 9})
            end 
            
            if t == '1B TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 10})
            end 
            
            if t == '100B TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 11})
            end 
            
            if t == '10T TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 12})
            end 
            
            if t == '1Qa TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 13})
            end 
            
            if t == '100Qa TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 14})
            end 
            
            if t == '10Qi TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 15})
            end 
            
            if t == '1Sx TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 16})
            end 
            
            if t == '100Sx TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 17})
            end 
            
            if t == '10Sp TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 18})
            end 
            
            if t == '100c TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 19})
            end 
            
            if t == '10No TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 20})
            end 
            
            if t == '10Dc TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 21})
            end 
            
            if t == '10Td TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 22})
            end 
            
            if t == '10Qad TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 23})
            end 
            
            if t == '10Qid TON' then 
                s.ReplicatedStorage.RemoteEvent:FireServer({[1] = 'EquipWeight_Request', [2] = 24})
            end 
        end
    end,
})
--
teleport1 = page4:CreateSection('Others')
--local Toggle = page4:CreateToggle({
--    Name = 'Teleport to Last Position on Death?',
--    CurrentValue = false,
--    Flag = 'LastPositionOnDeathToggle',
--    Callback = function(t)
--        getgenv().ComeAfterDeath = t;
--        while task.wait() do 
--            if not getgenv().ComeAfterDeath then break; end
--            repeat task.wait() until s.Players.LocalPlayer.Character:FindFirstChild('Humanoid')
--            if s.Players.LocalPlayer.Character.Humanoid.Health <= 1 then 
--               local pos = s.Players.LocalPlayer.Character.HumanoidRootPart.CFrame;
--                if s.Players.LocalPlayer.PlayerGui.IntroGui.Enabled then 
--                    main.clickButton(s.Players.LocalPlayer.PlayerGui.IntroGui.PlayBtn)
--                    task.wait(1.25)
--                    s.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
--                end
--            end
--        end
--    end,
--})
local Toggle2 = page4:CreateToggle({
    Name = 'Auto Respawn',
    CurrentValue = false,
    Flag = 'AutoRespawnToggle',
    Callback = function(t)
        getgenv().AutoRespawn = t;
        while task.wait() do 
            if not getgenv().AutoRespawn then break end
            local local_player = s.Players.LocalPlayer
            local character =  local_player.Character
            if character then
                if character:FindFirstChild('Humanoid') and character.Humanoid.Health <= 1 then 
                    if local_player.PlayerGui.IntroGui.Enabled then 
                        main.clickButton(local_player.PlayerGui.IntroGui.PlayBtn)
                    end
                end
            end
        end
    end,
})

local path_fist_training_areas = game:GetService('Workspace').Map:WaitForChild('Training_Collisions').FistStrength
local path_body_training_areas = game:GetService('Workspace').Map:WaitForChild('Training_Collisions').BodyToughness
local path_psychic_training_areas = game:GetService('Workspace').Map:WaitForChild('Training_Collisions').PsychicPower

teleport2 = page4:CreateSection('Strength')
local fist_strength_areas = {}
for i,v in pairs(path_fist_training_areas:GetChildren()) do
    table.insert(fist_strength_areas,v.Name)
end
local Dropdown = page4:CreateDropdown({
    Name = 'Select Area',
    Options = fist_strength_areas,
    CurrentOption = 'None',
    Flag = 'FistTPSelect', 
    Callback = function(t)
        getgenv().TargetFSArea = typeof(t) == 'table' and t[1] or t;
    end,
})
--
local AutoFarm1 = page4:CreateToggle({
    Name = 'Auto Farm',
    CurrentValue = false,
    Flag = 'AutoTeleportToAreaToggle',
    Callback = function(t)
        getgenv().AutoFarmFist = t;
        while task.wait() do 
            if not getgenv().AutoFarmFist then break end
            if getgenv().TargetFSArea then
                for i,v in pairs(path_fist_training_areas:GetChildren()) do
                    if getgenv().TargetFSArea == v.Name then
                        task.wait(1)
                        coroutine.wrap(main.toPos)(v.CFrame)
                    end
                end
            end
        end
    end,
})
-- 
local Button = page4:CreateButton({
    Name = 'Teleport',
    Callback = function()
        local t = getgenv().TargetFSArea
        for i,v in pairs(path_fist_training_areas:GetChildren()) do
            if t == v.Name then
                main.toPos(v.CFrame)
            end
        end
    end,
})
teleport3 = page4:CreateSection('Body Toughness')
local body_areas = {}
for i,v in pairs(path_body_training_areas:GetChildren()) do
    table.insert(body_areas,v.Name)
end
local Dropdown = page4:CreateDropdown({
    Name = 'Select Area',
    Options = body_areas,
    CurrentOption = 'None',
    Flag = 'BodyTPSelect',
    Callback = function(t)
        getgenv().TargetBTArea = typeof(t) == 'table' and t[1] or t;
    end,
})
local AutoFarm2 = page4:CreateToggle({
    Name = 'Auto Farm',
    CurrentValue = false,
    Flag = 'AutoTeleportToAreaToggle2',
    Callback = function(t)
        getgenv().AutoFarmBT = t;
        while task.wait() do 
            if not getgenv().AutoFarmBT then break end
            if getgenv().TargetBTArea then
                for i,v in pairs(path_body_training_areas:GetChildren()) do
                    print(getgenv().TargetBTArea,v.name)
                    if getgenv().TargetBTArea == v.Name then
                        task.wait(1)
                        coroutine.wrap(main.toPos)(v.CFrame)
                    end
                end
            end
        end
    end,
})
-- 
local Button = page4:CreateButton({
    Name = 'Teleport',
    Callback = function()
        t = getgenv().TargetBTArea;
        for i,v in pairs(path_body_training_areas:GetChildren()) do
            if t == v.Name then
                main.toPos(v.CFrame)
            end
        end
    end,
})

teleport4 = page4:CreateSection('Psychic')
local psychic_areas = {}
for i,v in pairs(path_psychic_training_areas:GetChildren()) do
    table.insert(psychic_areas,v.Name)
end
local Dropdown = page4:CreateDropdown({
    Name = 'Select Area',
    Options = psychic_areas,
    CurrentOption = 'None',
    Flag = 'PsychicTPSelect',
    Callback = function(t)
        getgenv().TargetPPArea = typeof(t) == 'table' and t[1] or t;
    end,
})
local AutoFarm3 = page4:CreateToggle({
    Name = 'Auto Farm',
    CurrentValue = false,
    Flag = 'AutoTeleportToAreaToggle3',
    Callback = function(t)
        getgenv().AutoFarmPP = t;
        while task.wait() do 
            if not getgenv().AutoFarmPP then break end
            if getgenv().TargetPPArea then
                for i,v in pairs(path_psychic_training_areas:GetChildren()) do
                    if getgenv().TargetPPArea == v.Name then
                        task.wait(1)
                        coroutine.wrap(main.toPos)(v.CFrame)
                    end
                end
            end
        end
    end,
})
-- 
local Button = page4:CreateButton({
    Name = 'Teleport',
    Callback = function()
        local t = getgenv().TargetPPArea;
        for i,v in pairs(path_psychic_training_areas:GetChildren()) do
            if t == v.Name then
                main.toPos(v.CFrame)
            end
        end
    end,
})
